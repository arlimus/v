#!/usr/bin/env ruby

require 'trollop'
require 'mime-helpers'
require 'zlog'
require 'argument-parser'

opts = Trollop::options do
  opt :pretend, "Pretend, don't execute"
  opt :verbose, "Let me know what is happening."
  opt :debug, "Give me everything."
end

Zlog::level = Zlog::VERBOSE if opts[:verbose]
Zlog::level = Zlog::DEBUG if opts[:debug]

class FileViewer
  include MimeHelpers

  # contains the result of parsing commandline arguments
  attr :args

  # parse arguments
  def initialize(opts)
    @opts = opts
    @arg_parser = ArgumentParser.new
    parseArgs
  end

  # run a given file
  # e.g. for "vid.mkv" execute "mplayer vid.mkv"
  def run( file )
    mime = getMime file
    ( Zlog.error "couldn't determine mime-type for file #{file}"
      return nil ) if mime.nil? or mime.empty?
    Zlog.info "got mime '#{mime}' for #{file}"
    
    exec = getRunner mime, file, @args
    return nil if exec.nil?
    
    Zlog.info "run: #{exec}"
    system( exec ) if not @opts[:pretend]
  end

  # run all files that were given as arguments
  def runAll
    @args["files"].each{|f| run f }
  end

  private

  def parseArgs
    # match arguments via block
    # anything that matches can be transformed
    # returns [ matched/transformed, unmatched ]
    def getArgs(args, &f)
      all = Array(args).map{|a|
        r = f.call(a)
        (r.nil?) ? [nil,a] : [r,nil]
      }
      [ all.map{|i|i[0]}.compact,
        all.map{|i|i[1]}.compact ]
    end

    @args = {
      "icon"    => "",
      "caption" => "v",
      "db"      => [],
      "factor"  => [],
      "files"   => []
    }
    
    rest = ARGV

    @args["db"], rest = getArgs(rest){ |c|
      m = /^([+-][0-9]+)db$/i.match(c)
      m == nil ? nil : m[1]
    }

    @args["factor"], rest = getArgs(rest){ |c|
      m = /^([0-9]+[.][0-9]+)x$/i.match(c)
      m == nil ? nil : m[1]
    }

    @args["files"] = rest.map{ |c|
      cf = File.expand_path(c)
      File.exists?( cf ) ? cf : (
        Zlog.warning "can't find file '#{c}'"
        nil
        )
    }.compact

    @args["files"] = ["."] if @args["files"].empty? and rest.empty?
  end

end

FileViewer.new(opts).runAll