#!/usr/bin/env ruby

require 'trollop'
require 'mime-helpers'
require 'zlog'
require 'argument-parser'

opts = Trollop::options do
  opt :pretend, "Pretend, don't execute"
  opt :verbose, "Let me know what is happening."
  opt :debug, "Give me everything."
end

Zlog.init_stdout loglevel: :info if opts[:verbose]
Zlog.init_stdout loglevel: :debug if opts[:debug]

class FileViewer
  # contains the result of parsing commandline arguments
  attr :args

  # parse arguments
  def initialize(opts)
    @logger = Logging.logger[self]
    @opts = opts
    @args = ArgumentParser.new.parse(ARGV)
    @logger.debug "parsed configuration: #{@args.inspect}"
  end

  # run all files that were given as arguments
  def runAll
    valid_entries = @args["files"].
      map do |file|
        # get mime
        [file, MimeHelpers::getMime(file)]
      end.find_all do |e|
        # get only files whose mime we found
        if ( e[1].nil? or e[1].empty? )
          @logger.error "couldn't determine mime-type for file '#{e[0]}'"
          false
        else true end
      end.map do |e|
        # get the runner; if it is a dir-runner we will get a list of files too
        runner, files = MimeHelpers::getRunner(e[1], e[0], @args)
        Zlog::abort("Could not run '#{e[0]}'") if runner.nil?
        files = e[0] if files.empty?
        # update the array with the runner and if necessary files
        [ files, e[1], runner]
      end.find_all do |e|
        # get only files whose runner we know
        not e[2].nil?
      end

    valid_entries.
      # get unique runners from all valid entries
      map{|e|e[2]}.uniq.
      map do |runner|
        # get files for this runner
        files = valid_entries.find_all{|e| e[2] == runner}.map{|e| e[0]}.flatten
        # fill the runner with all the files
        MimeHelpers::fillRunnerArgs( runner, files, @args )
      end.each do |exec|
        @logger.info "run: #{exec}"
        system( exec ) if not @opts[:pretend]
      end
  end

  private

end

FileViewer.new(opts).runAll